import java.util.Stack;

public class BinaryTree {

	Node root;

	BinaryTree(int key) {
		root = new Node(key);
	}

	BinaryTree() {
		root = null;
	}

	// postorder(L-R-N)
	void postorder() {
		if (root == null)
			return;
		Stack<Node> stack1 = new Stack<Node>();
		Stack<Node> stack2 = new Stack<Node>();
		stack1.push(root);
		while (stack1.isEmpty() == false) {
			root = stack1.pop();
			stack2.push(root);

			if (root.left != null)
				stack1.push(root.left);
			if (root.right != null)
				stack1.push(root.right);
		}

		while (stack2.isEmpty() == false) {
			root = stack2.pop();
			System.out.print(root.data + " : ");
		}

	}

	// preoder(N-L-R)
	void preorder() {
		if (root == null)
			return;
		Stack<Node> stack = new Stack<Node>();
		stack.push(root);
		while (stack.isEmpty() == false) {
			root = stack.pop();
			System.out.print(root.data + " : ");
			if (root.right != null)
				root = root.right;
			if (root.left != null)
				root = root.left;
		}
	}

	// inorder(N-L-R)
	void inorder() {
		if (root == null)
			return;
		Stack<Node> stack = new Stack<Node>();

		while (true) {
			if (root != null) {
				stack.push(root);
				root = root.left;
			} else {
				if (stack.isEmpty())
					break;
				root = stack.pop();
				System.out.print(root.data + " : ");

				root = root.right;
			}
		}
	}

	public static void main(String args[]) {
		BinaryTree bt = new BinaryTree();
		bt.root = new Node(1);
		bt.root.left=new Node(-1);
		bt.root.right=new Node(11);
		bt.root.left.left=new Node(-2);
		bt.root.left.right=new Node(-3);
		bt.root.left.right.right=new Node(5);
		bt.root.right.left=new Node(21);
		bt.root.right.right=new Node(6);
		
		
		
		
	}

}
